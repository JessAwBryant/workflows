"""
Collection of rules to create a sample databse for metagenomic
analysis in anvi'o
"""
import re
include: "anvio.profiles.snake"

config.setdefault('samples_name','all')
config.setdefault('sample_tree',{})
config['sample_tree'].setdefault('distance_metrics',['euclidean',])
config['sample_tree'].setdefault('coverage_metrics',\
                                 ['mean_coverage_Q2Q3_contigs'])

# set up sample files
sample_metadata_file = "anvio/samples.{}.metadata.db"\
                                .format(config['samples_name'])
dummy_metadata_file = "anvio/samples.{}.dummy.metadata.db"\
                                .format(config['samples_name'])
# in future, allow config to specify real metadata table to override this:
config.setdefault('transitions')[sample_metadata_file] = dummy_metadata_file
sample_db_file = "anvio/samples.{}.db".format(config['samples_name'])
config.setdefault('outputs',set()).add(sample_db_file)

rule metadata_placeholder:
    """ Generate a table of sample names so we can do sample clustering
    even if there is no proper metadata (yet) """
    output: dummy_metadata_file
    run:
        with open(output[0], 'w') as OUTF:
            OUTF.write("samples\tname\n")
            for sample in sample_list:
                OUTF.write("{sample}\t{sample}\n".format(sample=sample))

rule samples_db:
    """
    compile a table of metadata and some sorting options into a sample database
    """
    input:
        order="anvio/samples.orders.{samples}.tsv",
        data=sample_metadata_file
    output:
        "anvio/samples.{samples}.db"
    benchmark:
        "benchmarks/anvio.sample.db.time"
    log:
        "logs/anvio-samples-{samples}.log"
    version:
        config['anvio_version']
    shell:
        """ {config[anvio_prefix]}
            rm -f {output}
            anvi-gen-samples-info-database -D {input.data} -R {input.order} \
                -o {output} > {log} 2>&1 
        """

rule compile_sample_orders:
    """ collect newick trees into ordering file for samples """
    input:
        lambda w: expand(
         "anvio/sample_tree.{samples}.{coverage_metric}.{distance_metric}.newick",
         samples=w.samples,
         coverage_metric=config['sample_tree']['coverage_metrics'],
         distance_metric=config['sample_tree']['distance_metrics'])
    output:
        table="anvio/samples.orders.{samples}.tsv"
    run:
        lines = ["attributes\tbasic\tnewick",]
        for newick_file in input:
            ordering_name = \
                    re.search(r'anvio/sample_tree.{samples}\.(.+)\.newick'\
                                                                .format(**wildcards),
                              newick_file).group(1)

            with open(newick_file) as f:
                tree = f.read().strip()
            lines.append("{}\t\t{}".format(ordering_name, tree))
        with open(output.table, 'w') as out:
            out.write("\n".join(lines))

rule cluster_samples:
    """ Use hierarchical clustering to build a dendrogram of samples """
    input:
        "anvio/sample_coverages.{samples}.{coverage_metric}.tsv"
    output:
        "anvio/sample_tree.{samples}.{coverage_metric}.{distance_metric}.newick"
    log:
        "logs/anvio-cluster-samples.{samples}.{coverage_metric}.out"
    benchmark:
        "benchmarks/cluster_samples_{coverage_metric}_{distance_metric}.time"
    version:
        config['anvio_version']
    shell:
        """ {config[anvio_prefix]}
            anvi-matrix-to-newick {input} --transpose \
            --distance {wildcards.distance_metric} -o {output} > {log} 2>&1 """

rule sample_coverage_table:
    """ 
    Extract the desired metric from the merged sample db 
    
    We need to drop the last column (it's text, not data)
    """
    input:
        "anvio/status/samples-{samples}-merged"
    output:
        "anvio/sample_coverages.{samples}.{coverage_metric}.tsv"
    log:
        "logs/anvio-export-sample-coverage.{samples}.out"
    benchmark:
        "benchmarks/extract_sample_{coverage_metric}.time"
    version:
        config['anvio_version']
    shell:
        """ {config[anvio_prefix]}
            anvi-export-table {config[merged_samples_dir]}/PROFILE.db --table {wildcards.coverage_metric} -o {output}.raw > {log} 2>&1 
            perl -pe 's/\\t[^\\t]+$/\n/' {output}.raw > {output}
            rm {output}.raw
        """

