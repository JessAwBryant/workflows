"""
Rules for getting contigs ready for AnVio. Includes gene calls, hmm processing, and taxon assignments.

Outputs are empty status files because anvio tends to re-use files because they are dbs that get updated as you go. 
"""

if 'anvio_env' not in config:
    config['anvio_prefix']=""
else:
    config['anvio_prefix'] = "source activate {}\n".format(config['anvio_env'])

# use centrifuge if configured
centrifuge = 'centrifuge' in config
if not centrifuge:
    # otherwise try using configured tax db
    dbtax = 'dbs' in config
else:
    dbtax = False

if centrifuge or dbtax:
    # add to outputs if either is configured
    config.setdefault('outputs',set()).add("anvio/status/contig-tax")

for contig_output in ["anvio/status/contig-hmms",
                      "anvio/status/contig-cogs"]:
    config.setdefault('outputs',set()).add(contig_output)


rule anvio_contigs_drop_desc:
    """ Simplify the contig names so AnVio doesn't freak out """
    input:
        "contigs.fasta"
    output:
        temp("contigs.no_desc.fasta")
    version:
        get_version('sed', lines=[1,])
    log:
        "logs/simplify-contig-names"
    benchmark:
        "benchmarks/simplify-contig-names.time"
    shell:
        'cat {input} | sed -r "s/^>(\S+)\s*.*$/>\\1/" > {output}'

rule anvio_contigs_prune:
    """ drop short contigs """
    input:
        rules.anvio_contigs_drop_desc.output
    output:
        "anvio/contigs.fa"
    version:
        get_version('sed', lines=[1,])
    log:
        "logs/drop-short-contigs"
    benchmark:
        "benchmarks/drop-short-contigs.time"
    params:
        min_len=config.get("min_contig_length",2500)
    version:
        get_version("anvi-script-reformat-fasta",
                    cmd_prefix=config['anvio_prefix'],
                    lines=[1,],
                    regular_expression=r'(\d.+)')
    shell:
        """ {config[anvio_prefix]}
            anvi-script-reformat-fasta {input} -o {output} -l {params.min_len} """

rule contig_db:
    """
    Prep a fasta file of contig sequences for use in AnVio
        * calculates k-mer freqs
        * splits large contigs into pieces for better processing later
        * runs prodigal to find genes/ORFs
    """
    input:
        "anvio/contigs.fa"
    output:
        "anvio/status/contig-db"
    log:
        "logs/anvio-contig-db"
    benchmark:
        "benchmarks/anvio-contig-db.time"
    version:
        get_version("anvi-profile",
                    cmd_prefix=config['anvio_prefix'],
                    lines=[1,],
                    regular_expression=r'(\d.+)')
    shell:
        """{config[anvio_prefix]}
           rm -f anvio/contigs.db anvio/contigs.h5
           anvi-gen-contigs-database -f {input} -o anvio/contigs.db
           touch {output}"""

rule anvio_hmms:
    """ Preprocess contigs to find bacterial single copy genes """
    input:
        "anvio/status/contig-db"
    output:
        "anvio/status/contig-hmms"
    benchmark:
        "benchmarks/contigs.hmms.time"
    log:
        "logs/contigs.hmms"
    threads:
        20
    version:
        get_version("anvi-profile",
                    cmd_prefix=config['anvio_prefix'],
                    lines=[1,],
                    regular_expression=r'(\d.+)')
    shell:
        """{config[anvio_prefix]}
           anvi-run-hmms -c anvio/contigs.db --num-threads {threads}
           touch {output}"""

rule anvio_genes:
    """ extract gene calls (as DNS seqs) from processed contigs """
    input:
        "anvio/status/contig-db"
    output:
        "contigs.genes.ffn"
    benchmark:
        "benchmarks/contigs.genes.time"
    log:
        "logs/contigs.genes"
    version:
        get_version("anvi-profile",
                    cmd_prefix=config['anvio_prefix'],
                    lines=[1,],
                    regular_expression=r'(\d.+)')
    shell:
        """{config[anvio_prefix]}
           anvi-get-dna-sequences-for-gene-calls -c anvio/contigs.db -o {output}"""

rule fake_genes:
    """ create a symlink to the contig genes file with the proper extension, so the lastal rule will find it """
    input: "contigs.genes.ffn"
    output: temp("contigs.genes.fasta")
    shell: "ln -s {input} {output}"

rule anvio_contig_cogs:
    """ annotates contigs with COGs """
    input:
        "anvio/status/contig-db"
    output:
        "anvio/status/contig-cogs"
    benchmark:
        "benchmarks/contigs.cogs.time"
    log:
        "logs/contigs.cogs"
    threads:
        50
    version:
        get_version("diamond")
    shell:
        """{config[anvio_prefix]}
           anvi-run-ncbi-cogs -c anvio/contigs.db --num-threads {threads} --search-with diamond
           touch {output}"""

if dbtax:
    # rules for annotating genes with tax from refseq
    include: "../annotation/common.genes.snake"

    rule contigs_tax_table:
        """ uses my script to assign taxa to gene calls """
        input:
            "contigs.genes.vs.RefSeq.lastx",
        output:
            "contigs.annotation.tax_matrix.tsv"
        log:
            "logs/contigs_tax_table"
        benchmark:
            "benchmarks/contigs.tax.table.time"
        params:
            taxdump=os.path.split(config['dbs']["RefSeq"]['path'])[0],
            taxmap=config['dbs']['RefSeq']['path'] + ".tax",
        version:
            get_version('assign_taxa.py')
        shell:
            """echo "gene_callers_id\tt_phylum\tt_class\tt_order\tt_family\tt_genus\tt_species" > {output}
               assign_taxa.py -r species -R phylum -R class -R order -R family\
               -R genus -f blast -F 0 -C first -p accs -n {params.taxdump}\
               -m {params.taxmap} {input} >> {output}"""

if centrifuge:
    rule contigs_tax_table:
        """ uses centrifuge to assign taxa to gene calls
            
            the first output file is created silently, so it's not in the 
            shell command. """
        input:
            "contigs.genes.ffn"
        output:
            "centrifuge_report.tsv",
            "centrifuge_hits.tsv",
        log:
            "logs/contigs_centrifuge"
        benchmark:
            "benchmarks/contigs.centrifuge.time"
        params:
            centrifuge=config['centrifuge']['path'] + "/centrifuge",
            db=config['centrifuge']['path'] + "/" + config['centrifuge']['db'],
        version:
            get_version(config['centrifuge']['path'] + "/centrifuge",
                        lines=[1,],
                        regular_expression=r'(\d.+)')
        shell:
            "{params.centrifuge} -f -x {params.db} {input} -S {output[1]}"

if centrifuge or dbtax:
    rule anvio_gene_taxa:
        """ Loads gene tax assignments into contig DB for AnVio 
        Uses centrifuge if configured, else, it tries to use RefDeq and lastal
        """
        input:
            table=rules.contigs_tax_table.output,
            contig="anvio/status/contig-db"
        output:
            "anvio/status/contig-tax"
        params:
            format="centrifuge" if centrifuge else "default_matrix",
        version:
            get_version("anvi-profile",
                        cmd_prefix=config['anvio_prefix'],
                        lines=[1,],
                        regular_expression=r'(\d.+)')
        shell:
            """{config[anvio_prefix]}
               anvi-import-taxonomy -c anvio/contigs.db \
                 -i {input.table} -p {params.format}
               touch {output}"""

