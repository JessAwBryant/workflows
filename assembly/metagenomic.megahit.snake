"""
Python Makefile to assemble reads from multiple samples into a single assembly
with megahit.
"""
import glob
import re
snakefile_path=os.path.dirname(os.path.abspath(workflow.snakefile))
sys.path[0]=os.path.join(snakefile_path,'..','python')
from common import get_version
configfile: "./pooled_assembly.yaml"

include: "common.snake"

####
# Required conda packages:
#
# snakemake prodigal megahit bwa
###

######################
# Configuration
#
# Default to "meta" preset for megahit
config.setdefault('megahit',{}).setdefault('preset','meta')
# 
# Get sample reads from dir and pattern if not provided
if 'reads' not in config:
    try:
        samples_pattern = config['samples_pattern']
    except:
        raise Exception("Please supply list of samples or patterns to find"
                        "them with") 
    reads = config.setdefault('reads',{})
    sample_RE = re.compile(samples_pattern.get('re',
                                               r'/([^/]+)/[^/]+$'))
    print(sample_RE.pattern)
    for read_file in glob.glob(samples_pattern.get('glob',
                                                   './*/reads.cleaned.fastq.gz')):
        print(read_file)
        sample = sample_RE.search(read_file).group(1)
        reads[sample]=read_file
#
# End Configuration
######################


######################
# Rules


rule all:
    input:
        "contigs.fasta.stats",
        expand("mapping/{sample}.reads.vs.contigs.bam.bai",
                sample=config['reads'])

rule megahit:
    input:
        [reads for sample,reads in config['reads'].items()]
    output:
        "megahit-{params}/megahit.contigs.fa"
    log:
        "logs/megahit-{params}.log"
    benchmark:
        "benchmarks/megahit-{params}.time"
    version:
        get_version('megahit')
    params:
        preset=lambda w: w.params,
        inputs=','.join([r for s,r in config['reads'].items()])
    threads:
        40
    shell:
        "megahit --12 {params.inputs} --presets {params.preset} -t {threads}\
         --continue -o megahit-{params.preset} --out-prefix megahit --verbose\
         > {log} 2>&1"


rule contigs:
    input:
        "megahit-{params}/megahit.contigs.fa".format(params=config['megahit']['preset'])
    output:
        "contigs.fasta"
    shell:
        "ln -s {input} {output}"

