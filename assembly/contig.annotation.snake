"""
Rules that take a contigs.fasta file and generate a bunch of information about
the assembly

 * basic stats
 * assembly stats (N50, etc)
 * identify rRNA genes
 * predict proteins
 * annotate proteins
 * compile summary stats and annotations
"""

include: "../common/mapping_bwa.snake"
include: "rrna.annotation.snake"

config.setdefault('outputs', set()).add("contigs.annotations.gff")
for sample in config['sample_data']:
    if 'clean' in config['sample_data'][sample] or \
            'raw' in config['sample_data'][sample]:
        config['outputs'].add("contigs.annotations.coverage.{sample}.tsv"\
                                        .format(sample=sample))

rule prodigal:
    """ get gene predictions form prodigal """
    input:
        "contigs.fasta"
    output:
        "contigs.prodigal.genes.gff"
    benchmark:
        "benchmarks/contigs.prodigal.genes.time"
    version:
        get_version('prodigal','-v')
    shell:
        "prodigal -i {input} -f gff -o {output} -p meta -q"

rule merge_annotations:
    """ 
    merge all GFFs and drop genes that overlap rRNA
    """
    input:
        contigs="contigs.fasta",
        rrnas="contigs.vs.rRNA.cmsearch.gff",
        trnas="contigs.vs.tRNA.cmsearch.gff",
        genes="contigs.prodigal.genes.gff"
    output:
        "contigs.annotations.gff",
        "contigs.annotations.fna",
        "contigs.annotations.faa"
    params:
        output_root="contigs.annotations"
    benchmark:
        "benchmarks/contigs.annotations.merge.time"
    version:
        get_version('merge_gffs.py')
    shell:
        "merge_gffs.py -r {input.rrnas} -r {input.trnas} -c {input.genes} {input.contigs} {params.output_root}"

rule map_genes_to_bwadb:
    """
    map genes to BWA db. 
    There must be a bwa formatted db path configured in:
        config['dbs'][wildcards.db]['path']
    """
    input:
        "{file_root}.fna"
    output:
        ("{file_root}.fna.vs.{db}.sam")
    log:
        "logs/{file_root}.vs.{db}.sam.log"
    benchmark:
        "benchmarks/{file_root}.vs.{db}.sam.time"
    version:
        get_version('bwa', 
                    version_flag="", 
                    regular_expression=re.compile(r'Version:\s*(\S[^\n\r]+\S)'))
    threads:
        lambda w: config.get('bwa',{}).get('threads',20)
    params:
        db_path=lambda w: config['dbs'][w.db]['path'],
    shell:
        "bwa mem -t {threads} {params.db_path} {input} 2> {log}  > {output}"

rule annotation_coverage:
    """
    For each anntation, pull out the median coverage for its contig
    into a simple two column table
    """
    input:
        gff="contigs.annotations.gff",
        stats="contigs.coverages.{sample}.txt"
    output:
        table="contigs.annotations.coverage.{sample}.tsv",
    run:
        # Read stats table, but just keep median coverage
        cov_dict = pandas.read_table(input.stats,
                                     index_col=0,
                                     usecols=['contig', config['cov_col']])\
                                                             [config['cov_col']
        with open(output.table,'w') as OUT:
            with open(input.gff) as GFF:
                feature_count = 0
                current_contig = 0
                for line in GFF:
                    contig = line.split()[0].strip()
                    if contig != current_contig:
                        feature_count=1
                        current_contig = contig
                    else:
                        feature_count+=1
                    OUT.write("{contig}_{feature_count}\t{coverage}\n"\
                               .format(contig=contig,
                                       feature_count=feature_count,
                                       coverage=cov_dict[contig]))


