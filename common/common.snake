import os
import sys
snakefile_path=os.path.dirname(os.path.abspath(workflow.snakefile))
sys.path[0]=os.path.join(snakefile_path,'..','python')
from common import get_version

rule uncompress_file:
    input:
        "{file_root}.gz"
    output:
        temp("{file_root,[^z]$}")
    benchmark:
        "benchmarks/{file_root}.gunzip.time"
    version:
        get_version('gunzip', lines=0)
    shell:
        "gunzip -c {input} > {output}"

rule fastq_to_fasta:
    input: "{file_root}.fastq"
    output: "{file_root}.fasta"
    benchmark: "benchmarks/{file_root}.fasta.time"
    version: get_version("seqtk", "", lines=2)
    shell:
        "seqtk seq -A {input} > {output}"

rule histogram_simple:
    """ produce a histogram of sequence lengths """
    input:
        "{file_root}.{ext}"
    output:
        "file_root}.{ext,f.+}.hist"
    log:
        "logs/{file_root}.{ext}.stats.log"
        #lambda wildcards: "logs/{file_root}.{ext}.hist.log"\
        #                    .format(file_root=re.sub(r'/','_',\
        #                                             wildcards.file_root),
        #                            ext=wildcards.ext)
    benchmark:
        "benchmarks/{file_root}.{ext}.stats.time"
        #lambda wildcards: "benchmarks/{file_root}.{ext}.hist.time"\
        #                    .format(file_root=re.sub(r'/','_',\
        #                                             wildcards.file_root),
        #                            ext=wildcards.ext)
    params:
        cat=lambda wildcards:"gunzip -c" \
         if re.search(r'\.gz$',wildcards.ext) else "cat"
    version:
        get_version('prinseq','-version')
    shell:
        "{params.cat} {input} | \
        seqtk comp | \
        cut -f 2 | \
        histrograms.py -l length -b 30 > {output}"

rule prinseq_any:
    """ calculate basic stats for a fasta file """
    input:
        "{file_root}.{ext}"
    output:
        "{file_root}.{ext,f.+}.stats"
    log:
        "logs/{file_root}.{ext}.stats.log"
        #lambda wildcards: "logs/{file_root}.{ext}.stats.log"\
        #                    .format(file_root=re.sub(r'/','_',\
        #                                             wildcards.file_root),
        #                            ext=wildcards.ext)
    benchmark:
        "benchmarks/{file_root}.{ext}.stats.time"
        #lambda wildcards: "benchmarks/{file_root}.{ext}.stats.time"\
        #                    .format(file_root=re.sub(r'/','_',\
        #                                             wildcards.file_root),
        #                            ext=wildcards.ext)
    params:
        input_flag=lambda wildcards:"-fastq" \
         if re.search(r'q',wildcards.ext) else "-fasta",
        aa=lambda wildcards:"-aa" \
         if re.search(r'\bfaa\b',wildcards.ext) else "",
        cat=lambda wildcards:"gunzip -c" \
         if re.search(r'\.gz$',wildcards.ext) else "cat"
    version:
        get_version('prinseq','-version')
    shell:
        "{params.cat} {input} | \
        prinseq {params.input_flag} stdin \
         -stats_len -stats_info {params.aa} > {output}"


