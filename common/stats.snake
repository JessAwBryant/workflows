try:
    hist_version = get_version('histograms.py')
    enable_hist = True
except:
    enable_hist = False

if enable_hist:
    rule histogram_simple:
        """ produce a histogram of sequence lengths """
        input:
            "{file_root}.{ext}"
        output:
            "{file_root}.{ext,f(aa|fn|na|a|asta|astq)(\.gz)?}.hist"
        log:
            "logs/{file_root}.{ext}.hist.log"
        benchmark:
            "benchmarks/{file_root}.{ext}.hist.time"
        version:
            get_version('histograms.py')
        params:
            cat=lambda wildcards:"gunzip -c" \
             if re.search(r'\.gz$',wildcards.ext) else "cat"
        shell:
            "{params.cat} {input} | \
            seqtk comp | \
            cut -f 2 | \
            histograms.py -l length -b 30 > {output}"
else:
    rule histogram_dummy:
        """ create a placeholder file so that the workflow is happy """
        input:
            "{file_root}.{ext}"
        output:
            "{file_root}.{ext,f(aa|fn|na|a|asta|astq)(\.gz)?}.hist"
        shell:
            "echo 'histograms.py is not installed' > {output}"

rule prinseq_any:
    """ calculate basic stats for a fasta file """
    input:
        "{file_root}.{ext}"
    output:
        "{file_root}.{ext,f[a-z]+(\.gz)?}.stats"
    log:
        "logs/{file_root}.{ext}.stats.log"
    benchmark:
        "benchmarks/{file_root}.{ext}.stats.time"
    params:
        input_flag=lambda wildcards:"-fastq" \
         if re.search(r'q',wildcards.ext) else "-fasta",
        aa=lambda wildcards:"-aa" \
         if re.search(r'\bfaa\b',wildcards.ext) else "",
        cat=lambda wildcards:"gunzip -c" \
         if re.search(r'\.gz$',wildcards.ext) else "cat"
    version:
        get_version('prinseq-lite.pl','-version')
    shell:
        "{params.cat} {input} | \
        prinseq-lite.pl {params.input_flag} stdin \
         -stats_len -stats_info {params.aa} > {output}"



