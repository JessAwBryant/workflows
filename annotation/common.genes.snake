import sys
import os
snakefile_path=os.path.dirname(os.path.abspath(workflow.snakefile))
sys.path[0]=os.path.join(snakefile_path,'..','python')
from common import get_version
from annotate import get_db_assignment_params,get_db_types,\
                     get_hit_table_name_from_wildcards_db
#configfile: "annotation.yaml"
#########
# CONFIGURATION
#
# rank to collect taxa on (defaults to order)
config.setdefault('clade_ranks', ['order'])
#
# threads per search are set in the threads: parameter
# Either use the db name or "default". EG:
# threads:
#   default: 5
#   lastal: 20
# Defaults to 8 for eveerything
default_threads=config.setdefault('threads',{}).get('default', 3)
#
# pull out taxdb (usually refseq) and list of gene family dbs
gene_family_dbs, config['taxdb'] = get_db_types(config)
config['taxalg']='lastp'
#
config.setdefault('annotation_hit_table_map',{})
# End configuration
##########

include: "common.snake"

rule compile_counts:
    """
    Use clade assignments and gene family assignments to compile a table of gene family counts by clade.
    """
    input:
        "{prefix}.annot.{taxdb}.{taxalg}.{rank}.tsv",
        "{prefix}.annot.gene_family.{db}.{dbfmt}.tsv",
        "{prefix}.coverage.tsv",
    output:
        "{prefix}.annot.{taxdb}.{taxalg}.{rank}.vs.{db}.{dbfmt}.tsv"
    benchmark:
        "benchmarks/compile_counts.{rank}.{db}"
    log:
        "logs/compile_counts.{rank}.{db}"
    version:
        get_version('compile_hit_counts.py')
    params:
        three_column_opt="-L" if config.get('output_style','default').lower() == 'long' else ""
    shell:
        "compile_hit_counts.py {params.three_column_opt} -1 {input[0]} -2 {input[1]} \
            -m {input[2]} -o {output} -S"

