"""
Annotate reads using six frame translation. Lastal has this built in (aka: lastx) when given the -F flag. For hmmsearch, we'll run through transeq 1st.

This makefile does two things:

 1. It sets up the transeq rule (with some required name manipulation to prevent errors).

 2. It defines a version of the compile_counts rule that calls for sixframe translation.

The annotation/common.snake makefile has the meat of the annotation code
"""

from python.common import get_version
from python.annotate import get_db_assignment_params,get_db_types,\
                     get_hit_table_name_from_wildcards_db

# command for removing transeq readingframe suffixes from hit names
translation_filter = "perl -pe 's/^(\S+)_\d+(\s+)/\\1\\2/'"

# NB: the following refers to annotation/common.snake (not common/common.snake)
include: "common.snake"

rule remove_colons:
    " transeq doesn't like colons "
    input: "{prefix}.{ext}"
    output: "{prefix}.nocolon.{ext,f[^.]+}"
    benchmark: "benchmarks/{prefix}.nocolon.{ext}.time"
    shell:
        "cat {input} \
         | perl -pe 'if (m/^>/) {{ tr/:/_/; }}' \
         > {output}"

rule transeq:
    " translate in six frames "
    input: "{prefix}.fasta"
    output: "{prefix}.sixframe.faa"
    benchmark: "benchmarks/{prefix}.sixframe.time"
    version: get_version("transeq")
    shell:
        "transeq -sequence {input} -clean -outseq {output} -table 11 -frame all"

rule compile_counts:
    """
    Use clade assignments and gene family assignments to compile a table of gene family counts by clade.

    input has switch to skip six frame translation for lastx or lastn

    dbfmt should be tbl.dbatch for fragmented dbs
    """
    input:
        "{prefix}.nocolon.annot.{taxdb}.lastx.{rank}.tsv",
        lambda w: \
            "{prefix}.nocolon{translate}.annot.gene_family.{db}.{dbfmt}.tsv"\
                .format(translate='.sixframe' \
                                if re.search(r'last[nx]',w.dbfmt) is None \
                                else '',
                        **w)
    output:
        "{prefix}.annot.{taxdb}.lastx.{rank}.vs.{db}.{dbfmt}.tsv"
    benchmark:
        "benchmarks/{prefix}.compile_counts.{taxdb}.lastx.{rank}.vs.{db}.{dbfmt}.time"
    log:
        "logs/{prefix}.compile_counts.{taxdb}.lastx.{rank}.vs.{db}.{dbfmt}.log"
    version:
        get_version('compile_hit_counts.py')
    params:
        three_column_opt="-L" if config.get('output_style','default').lower() == 'long' else ""
    shell:
        "compile_hit_counts.py {params.three_column_opt} -1 {input[0]} -2 {input[1]} -o {output} -S"

