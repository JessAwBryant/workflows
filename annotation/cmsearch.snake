from python.cmsearch import get_cm_model_version

config.setdefault('threads',{})
config.setdefault('cmsearch_models',
                  os.path.join(snakefile_path,"annotation",'models'))

rule cmsearch_default_all:
    input: 
        "reads.rRNA.cmsearch.gff",
        "reads.tRNA.cmsearch.gff"

rule cmsearch:
    """ 
    Find likely tRNA or rRNA genes using cmsearch and RFAM models
    """
    input:
        "{file_root}.fasta"
    output:
        temp("{file_root}.vs.{molecule}.cmsearch.tbl")
    benchmark:
        "benchmarks/contigs.annotations.vs.{molecule}.tbl.txt"
    threads:
        int(config['threads'].get('cmsearch',20))
    version:
        lambda wildcards:\
            get_version('cmsearch',
                        '-h',
                        lines=1) + " :: " + \
                get_cm_model_version(config['cmsearch_models'])
    params:
        cmfile=os.path.join(config['cmsearch_models'],'{molecule}.cm'),
        flags=lambda wildcards:\
          "--hmmonly" if wildcards.molecule=='rRNA' else ""
    shell:
        "cmsearch {params.flags} \
            -o /dev/null --tblout {output} --cpu {threads} \
            {params.cmfile} {input}"

rule hit_table_to_gff:
    """
    convert cmsearch output to gff
    can be extended to other formats by adding logic to the params declartion
    """
    input:
        "{file_root}.{tool}.tbl"
    output:
        "{file_root}.{tool}.gff"
    benchmark:
        "benchmarks/{file_root}.{tool}.gff.time"
    version:
        get_version('filter_blast_m8.py')
    params:
        format=lambda w: w.tool
    shell:
        "filter_blast_m8.py -v -f {params.format} --gff -o {output} {input}"


