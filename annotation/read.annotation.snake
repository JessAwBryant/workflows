# Python makefile to pull out reads from a BAM alignment 
#  and use RefSeq, KEGG, PFAM, and others to annotate them
# Annotations are generated as tables of gene_family counts 
#  groupbed by taxonomic clade
import sys
import os
snakefile_path=os.path.dirname(os.path.abspath(workflow.snakefile))
sys.path[0]=os.path.join(snakefile_path,'..','python')
from common import get_version
#configfile: 'annotation.yaml'

#########
# CONFIGURATION
#
# defaults for basic operation
annotation_hit_table_map = config.setdefault('annotation_hit_table_map',{})
bam_file_prefix_map=config.setdefault('bam_file_prefix_map',{})
#
# if no prefixes given, use "reads" or "{sample}_reads" if sample is set
annotation_prefixes = config.get('annotation_prefixes',[])
if len(annotation_prefixes)==0:
    if 'sample_id' in config:
        annotation_prefixes.append("{}_reads".format(config['sample_id']))
    else:
        annotation_prefixes.append("reads")
#
# Fill out maps for each prefix with defaults if data is missing
hit_table_map={}
for prefix in annotation_prefixes:
    # where to look for bam file (will also try prefix.fastq if missing)
    bam_file_prefix_map.setdefault(prefix,'{}.vs.contigs.bam'.format(prefix))
    # what to call hit tables
    annotation_hit_table_map.setdefault(prefix,prefix+".genes")
    # map back from hit table names
    hit_table_map[annotation_hit_table_map[prefix]]=prefix
    # filter for assigment (so we count reads instead of genes)
    config.setdefault('hit_table_filter',{})[prefix]="sed -r 's/^(S+)_\d+(\s+#)/\1\2/'"
#
# End configuration
##########

include: "../common/common.genes.snake"
include: "./common.snake"

# make sure read extraction comes from sam, not a nonexistent fastq:
ruleorder: extract_reads > fastq_to_fasta

# set up list of files to create
annotation_file_list = \
                expand("{prefix}.annotation.{clade_rank}.{db}.tsv",
                       db=gene_family_dbs,
                       prefix=config['bam_file_prefix_map'],
                       clade_rank=config['clade_ranks'],) + \
                expand("{prefix}.fasta.{ext}", 
                       ext=['stats','hist'],
                       prefix=config['bam_file_prefix_map'],) + \
                expand("{hit_table_prefix}.faa.{ext}",
                       ext=['stats','hist'],
                       hit_table_prefix=hit_table_map)


##########
# RULES:
#  This lays out the dependencies and logic of the workflow
#  After the "all" target, it is generally laid out start to finish
rule read_annotation_all:
    input:
        annotation_file_list

rule extract_reads:
    """
    Pull reads out of BAM file
    """
    input:
        lambda w: bam_file_prefix_map.get(w.annotation_prefix,
                                                    w.annotation_prefix)
    output:
        temp("{annotation_prefix}.fasta")
    benchmark:
        "benchmarks/extract_reads.time"
    log:
        "logs/extract_reads.log"
    version:
        get_version('samtools', lines=[0,])
    shell:
        "samtools fasta -0 {output} {input} > {log} 2>&1"

rule predict_genes_prodigal:
    """
    Generate FAA (fasta of amino acid sequences) for genes predicted in reads
    """
    input:
        lambda w: "{}.fasta".format(hit_table_map.get(w.hit_table_prefix,
                                                      w.hit_table_prefix))
    output:
        faa=temp("{hit_table_prefix}.faa")
    log:
        "logs/{hit_table_prefix}.predict_genes_prodigal.log"
    benchmark:
        "benchmarks/{hit_table_prefix}.predict_genes_prodigal.time"
    version:
        get_version('batch_launcher.py') + '::' + \
        get_version('prodigal','-v')
    threads:
        config['threads'].get('prodigal',default_threads)
    shell:
        # Use batch launcher to multithread prodigal
        "batch_launcher.py -N {threads} -i -i -o -a -T fasta -X local -v -- \
         prodigal -i {input} -a {output} -p meta -q -o /dev/null > {log} 2>&1 "

rule clean:
    """ remove all generated files """
    params:
        anns=" ".join(expand("{annotation_prefix}.annotation.*",
                    annotation_prefix=config['bam_file_prefix_map'].values())),
        hits=" ".join(expand("{hit_table_prefix}.*",
                    hit_table_prefix=[annotation_hit_table_map.get(a) for a in config['bam_file_prefix_map'].values()]))
    shell:
        "rm -rf logs benchmarks reads.fasta {params.anns} {params.hits}"

