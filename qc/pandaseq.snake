include: 'bbduk.snake'
include: 'tmatic.snake'

from python.qc import dummy_join_fastq
from python.pandaseq import scan_padnaseq_log

rule pandaseq:
    """ Joins paired illumina reads """
    input:
        fwd="{file_root}.R1.paired.noadapt.fastq",
        rev="{file_root}.R2.paired.noadapt.fastq",
    output:
        fastq="{file_root}.paired.assembled.fastq",
        log="{file_root}.paired.pandaseq_join.log",
    benchmark:
        "benchmarks/{file_root}.pandaseq.time"
    version:
        get_version('pandaseq',"-v")
    params:
        threshold=config.get('pandaseq_threshold','.32')
    shell:
        """
        pandaseq -f {input.fwd} -r {input.rev} -d rBfkmS \
        -t {params.threshold} -F > {output.fastq} 2> {output.log} || true
        """

#old code to check pandaseq output
#ERRS=`egrep -c "^(ERR|bad) " {log} || :` || true
#if [ "$ERRS" == 0 ]; then exit 0; else exit 2; fi

rule dummy_join:
    """ Joins unjoined illumina read pairs """
    input:
        fwd="{file_root}.R1.paired.trimmed.fastq",
        rev="{file_root}.R2.paired.trimmed.fastq",
        pandaseq_log="{file_root}.paired.pandaseq_join.log",
    output:
        "{file_root}.paired.pandaseq_dummy.fastq"
    log:
        "logs/{file_root}.pandaseq_dummy.log"
    benchmark:
        "benchmarks/{file_root}.pandaseq_dummy.time"
    run:
        with open(log[0], 'w') as LOG:
            unpaired, counts = scan_pandaseq_log(input.pandaseq_log, LOG)
        dummy_join_fastq(input, output, log, 
                         record_id_filter = unpaired)

rule merge_panda:
    """ merges pandaseq joins and dummy joins (after some end-trimming) """
    input:
        panda="{file_root}.paired.assembled.trimmed.fastq",
        dummy="{file_root}.paired.trimmed.dummy.fastq",
        unpaired1="{file_root}.R1.unpaired.fastq",
        unpaired2="{file_root}.R2.unpaired.fastq",
    output:
        merged="{file_root}.joined.fastq"
    log:
        "logs/{file_root}.joined.log"
    benchmark:
        "benchmarks/{file_root}.joined.time"
    shell:
        "cat {input} > {output}"

