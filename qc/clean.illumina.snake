"""
Snakefile to clean and join illumina reads for read-based analysis

We are starting with the old recipe from illuminaPrep:
 * trimmomatic to remove primers
 * pandaseq to join and screen
 * trimmomatic again to trim ends and windows
"""
import re
import os
import sys

snakefile_path=os.path.dirname(os.path.abspath(workflow.snakefile))
sys.path[0]=os.path.join(snakefile_path,'..','python')
from common import get_version
#configfile: "./illumina.yaml"
include: "../common/common.snake"

reads_stats_templates = [
        "{sample}_reads.clipped.joined.trimmed.fastq.stats",
        "{sample}_reads.clipped.joined.trimmed.fastq.hist",
        "{sample}_reads.clipped.paired.joined.fastq.stats",
        "{sample}_reads.clipped.paired.joined.fastq.hist"] + \
        expand("{{sample}}_reads.clipped.{dir}.{state}.fastq.{ext}",
               ext=['stats','hist'],
               dir=['R1','R2'],
               state=['paired','unpaired'],) + \
        expand("{{sample}}_reads.{dir}.fastq.{ext}",
               ext=['stats','hist'],
               dir=['R1','R2'],)


if 'sample_id' not in config:
    if len(config['samples'])==1:
        config['sample_id']=next(iter(config['samples'].keys()))
    else:
        raise Exception("Please specify a sample to process using the 'sample_id' config variable")

sample=config['sample_id']
reads_stats_files = [t.format(sample=sample) for t in reads_stats_templates]

if 'SFTP' in config:
    import paramiko
    from snakemake.remote.SFTP import RemoteProvider
    # get pysftp params from config (usu 'username' and 'private_key')
    if 'private_key' in config['SFTP']:
        # if private_key starts with "agent:" look for key in ssh-agent by name
        private_key = config['SFTP']['private_key']
        m = re.search(r'^agent:(.+)', private_key)
        if m is not None:
            agent_key_name = m.group(1)
            agent_keys = paramiko.agent.Agent().get_keys()
            config['SFTP']['private_key'] = \
                [k for k in agent_keys if k.name==agent_key_name][0]
    # setup connection
    SFTP = RemoteProvider(**config['SFTP'])

rule clean_illumina_all:
    input:
        reads_stats_files,

rule raw_reads:
    """Creates temporary link to raw reads"""
    input:
        lambda w: SFTP.remote(config['samples'][w.sample][w.dir], keep_local=True) if config['samples'][w.sample].get('remote',False) else config['samples'][w.sample][w.dir]
    output:
        "{sample}_reads.{dir,R[12]}.fastq"
    params:
        # if we are pulling from a remote server, just move the downloaded file into place
        cmd=lambda w: "mv" if config['samples'][w.sample].get('remote',False) else "ln -s"
    shell:
        "{params.cmd} {input} {output}"

rule trimmomatic_adapters:
    """
    Generates fasta file with adapters for trimming
    """
    input:
        #lambda w: config['samples'][w.sample]['sample_sheet']
        lambda w: SFTP.remote(config['samples'][w.sample]['sample_sheet'], keep_local=True) if config['samples'][w.sample].get('remote',False) else config['samples'][w.sample]['sample_sheet']
    output:
        "{sample}_adapters.fa"
    log:
        "logs/{sample}_adapters.fa.log"
    benchmark:
        "benchmarks/{sample}/create_adapters_file.txt"
    version:
        get_version("createPrimerFile.py")
    params:
        sample_num = lambda w: config['samples'][w.sample]['sample_num']
    shell:
        """source activate pymg2
           createPrimerFile.py -s {input} -n {params.sample_num} > {output}
        """

rule trimmomatic_clean_adapters:
    """Removes adapters from given paired-end reads with given parameters"""
    input:
        fwd="{sample}_reads.R1.fastq",
        rev="{sample}_reads.R2.fastq",
        primers="{sample}_adapters.fa"
    output:
        temp("{sample}_reads.clipped.R1.paired.fastq"),
        temp("{sample}_reads.clipped.R2.paired.fastq"),
        temp("{sample}_reads.clipped.R1.unpaired.fastq"),
        temp("{sample}_reads.clipped.R2.unpaired.fastq"),
    log:
        "logs/{sample}_trimmomatic.log"
    benchmark:
        "benchmarks/{sample}_trimmomatic.time"
    threads:
        20
    version:
        get_version('trimmomatic','-version')
    params:
        trim_params=lambda wildcards: config.get('trimmomatic_clip_params',
                "ILLUMINACLIP:%s:2:30:10 MINLEN:50") % \
                ("%s_adapters.fa" % (wildcards.sample))
    shell:
        """
        trimmomatic PE -threads {threads} \
        {input.fwd} {input.rev} \
        {output[0]} {output[2]} {output[1]} {output[3]} \
        {params.trim_params}
        """

rule trimmomatic_trim:
    """Trims given paired-end reads with given parameters"""
    input:
        "{file_root}.fastq"
    output:
        temp("{file_root}.trimmed.fastq")
    log:
        "logs/{file_root}_trimmomatic_trim.log"
    benchmark:
        "benchmarks/{file_root}_trimmomatic_trim.time"
    threads:
        20
    version:
        get_version('trimmomatic','-version')
    params:
        trim_params=lambda wildcards: config.get('trimmomatic_trim_params',
                "LEADING:10 TRAILING:10 SLIDINGWINDOW:4:20 MINLEN:50")
    shell:
        """
        trimmomatic SE -threads {threads} {input} {output} {params.trim_params}
        """

rule pandaseq:
    """ Joins paired illumina reads """
    input:
        fwd="{file_root}.R1.paired.fastq",
        rev="{file_root}.R2.paired.fastq",
    output:
        temp("{file_root}.paired.joined.fastq")
    log:
        "logs/{file_root}.pandaseq"
    benchmark:
        "benchmarks/{file_root}.pandaseq.time"
    version:
        get_version('pandaseq',"-v")
    params:
        threshold=config.get('pandaseq_threshold','.32')
    shell:
        """
        rm -f {log}
        pandaseq -f {input.fwd} -r {input.rev} -d rBfkmS \
        -t {params.threshold} -F > {output} 2> {log} || true
        ERRS=`egrep -c "^(ERR|bad) " {log} || :` || true
        if [ "$ERRS" == 0 ]; then exit 0; else exit 2; fi
        """

rule merge_paired_unpaired:
    """ concatenate joined trimmed reads with unpaired trimmed reads """
    input:
        "{file_root}.clipped.paired.joined.trimmed.fastq",
        "{file_root}.clipped.R1.unpaired.fastq",
        "{file_root}.clipped.R2.unpaired.fastq",
    output:
        "{file_root}.clipped.joined.trimmed.fastq"
    shell:
        """
        cat {input} > {output}
        """
